// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using clinicadental.dbcontext;

#nullable disable

namespace clinicadental.Migrations
{
    [DbContext(typeof(ClinicadentalContext))]
    [Migration("20250424213512_identiymigration")]
    partial class identiymigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb3_general_ci")
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb3");
            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("clinicadental.Models.Afeccion", b =>
                {
                    b.Property<int>("IdAfeccion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdAfeccion"));

                    b.Property<string>("Afeccion1")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("Afeccion");

                    b.HasKey("IdAfeccion")
                        .HasName("PRIMARY");

                    b.ToTable("afeccion", (string)null);
                });

            modelBuilder.Entity("clinicadental.Models.Antecedentebucodental", b =>
                {
                    b.Property<int>("IdAntecedenteBucoDental")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdAntecedenteBucoDental"));

                    b.Property<string>("Bebe")
                        .IsRequired()
                        .HasColumnType("enum('Si','No')");

                    b.Property<string>("Fuma")
                        .IsRequired()
                        .HasColumnType("enum('Si','No')");

                    b.Property<string>("Otro")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<DateTime?>("UltimaVisitaDental")
                        .HasColumnType("datetime");

                    b.HasKey("IdAntecedenteBucoDental")
                        .HasName("PRIMARY");

                    b.ToTable("antecedentebucodental", (string)null);
                });

            modelBuilder.Entity("clinicadental.Models.Antecedenteenfermedad", b =>
                {
                    b.Property<int>("IdAntecedenteEnfermedad")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdAntecedenteEnfermedad"));

                    b.Property<int>("IdAntecedentePatologico")
                        .HasColumnType("int");

                    b.Property<int>("IdEnfermerdad")
                        .HasColumnType("int");

                    b.HasKey("IdAntecedenteEnfermedad")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdAntecedentePatologico" }, "fk_antecedenteenfermedad_antecedentepatologico1_idx");

                    b.HasIndex(new[] { "IdEnfermerdad" }, "fk_antecedenteenfermedad_enfermerdad1_idx");

                    b.ToTable("antecedenteenfermedad", (string)null);
                });

            modelBuilder.Entity("clinicadental.Models.Antecedentegeneral", b =>
                {
                    b.Property<int>("IdAntecedenteGeneral")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdAntecedenteGeneral"));

                    b.Property<string>("Alergia")
                        .IsRequired()
                        .HasColumnType("enum('Si','No')");

                    b.Property<string>("Embarazo")
                        .IsRequired()
                        .HasColumnType("enum('Si','No')");

                    b.Property<string>("EspecificacionHemorragia")
                        .IsRequired()
                        .HasColumnType("enum('Inmediata','Mediata','Ninguna')");

                    b.Property<string>("HemorragiaDental")
                        .IsRequired()
                        .HasColumnType("enum('Si','No')");

                    b.Property<string>("SemanaEmbarazo")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("TipoAlergia")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("IdAntecedenteGeneral")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdAntecedenteGeneral" }, "idantecedentegeneral_UNIQUE")
                        .IsUnique();

                    b.ToTable("antecedentegeneral", (string)null);
                });

            modelBuilder.Entity("clinicadental.Models.Antecedentehigieneoral", b =>
                {
                    b.Property<int>("IdAntecedenteHigieneOral")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdAntecedenteHigieneOral"));

                    b.Property<string>("CepilloDental")
                        .IsRequired()
                        .HasColumnType("enum('Si','No')");

                    b.Property<string>("EnjuagueBucal")
                        .IsRequired()
                        .HasColumnType("enum('Si','No')");

                    b.Property<string>("FrecuenciaCepilladoDental")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("IdHigieneBucal")
                        .IsRequired()
                        .HasColumnType("enum('Buena','Regular','Mala')");

                    b.Property<string>("IdHiloDental")
                        .IsRequired()
                        .HasColumnType("enum('Si','No')");

                    b.Property<string>("SangradoEncias")
                        .IsRequired()
                        .HasColumnType("enum('Si','No')");

                    b.HasKey("IdAntecedenteHigieneOral")
                        .HasName("PRIMARY");

                    b.ToTable("antecedentehigieneoral", (string)null);
                });

            modelBuilder.Entity("clinicadental.Models.Antecedentepatologico", b =>
                {
                    b.Property<int>("IdAntecedentePatologico")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdAntecedentePatologico"));

                    b.Property<string>("AntecedentePatologicoFamiliar")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Otro")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("RecibeMedicacion")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("TratamientoMedico")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.HasKey("IdAntecedentePatologico")
                        .HasName("PRIMARY");

                    b.ToTable("antecedentepatologico", (string)null);
                });

            modelBuilder.Entity("clinicadental.Models.Avancetratamiento", b =>
                {
                    b.Property<int>("IdAvanceTratamiento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdAvanceTratamiento"));

                    b.Property<string>("Avance")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateOnly?>("FechaConclusion")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("FechaInicio")
                        .HasColumnType("date");

                    b.Property<int>("IdTratamiento")
                        .HasColumnType("int");

                    b.Property<string>("PiezaDental")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("IdAvanceTratamiento")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdTratamiento" }, "fk_avancetratamiento_tratamiento1_idx");

                    b.ToTable("avancetratamiento", (string)null);
                });

            modelBuilder.Entity("clinicadental.Models.Cita", b =>
                {
                    b.Property<int>("IdCita")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdCita"));

                    b.Property<string>("CorreoElectronico")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("EstadoCita")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<DateOnly>("FechaHoraCita")
                        .HasColumnType("date");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("HorafinCita")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("HorainicioCita")
                        .HasColumnType("datetime");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int");

                    b.Property<string>("MotivoCita")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("NombrePaciente")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Telefono")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.HasKey("IdCita")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdUsuario" }, "fk_cita_usuario1_idx");

                    b.ToTable("cita", (string)null);
                });

            modelBuilder.Entity("clinicadental.Models.Clinica", b =>
                {
                    b.Property<int>("IdClinica")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdClinica"));

                    b.Property<string>("Celular")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("celular");

                    b.Property<string>("Direccion")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("FotoClinica")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<int?>("IdUsuario")
                        .HasColumnType("int");

                    b.Property<string>("Nit")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("Nombre")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Pmc")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("Ujsedes")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.HasKey("IdClinica")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdUsuario" }, "fk_clinica_usuario1_idx");

                    b.ToTable("clinica", (string)null);
                });

            modelBuilder.Entity("clinicadental.Models.Cuentum", b =>
                {
                    b.Property<int>("IdCuenta")
                        .HasColumnType("int");

                    b.Property<string>("Cuenta")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("IdCuenta")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdUsuario" }, "fk_cuenta_usuario1_idx");

                    b.ToTable("cuenta", (string)null);
                });

            modelBuilder.Entity("clinicadental.Models.Enfermerdad", b =>
                {
                    b.Property<int>("IdEnfermerdad")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdEnfermerdad"));

                    b.Property<string>("Enfermedad")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.HasKey("IdEnfermerdad")
                        .HasName("PRIMARY");

                    b.ToTable("enfermerdad", (string)null);
                });

            modelBuilder.Entity("clinicadental.Models.Estadocivil", b =>
                {
                    b.Property<int>("IdEstadoCivil")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdEstadoCivil"));

                    b.Property<string>("EstadoCivil1")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("EstadoCivil");

                    b.HasKey("IdEstadoCivil")
                        .HasName("PRIMARY");

                    b.ToTable("estadocivil", (string)null);
                });

            modelBuilder.Entity("clinicadental.Models.Estadoperiodontale", b =>
                {
                    b.Property<int>("IdEstadoPeriodontal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdEstadoPeriodontal"));

                    b.Property<int?>("CeoC")
                        .HasColumnType("int")
                        .HasColumnName("CEO_C");

                    b.Property<int?>("CeoE")
                        .HasColumnType("int")
                        .HasColumnName("CEO_E");

                    b.Property<int?>("CeoO")
                        .HasColumnType("int")
                        .HasColumnName("CEO_O");

                    b.Property<int?>("CeoTotal")
                        .HasColumnType("int")
                        .HasColumnName("TotalCeo");

                    b.Property<int?>("CpodC")
                        .HasColumnType("int")
                        .HasColumnName("CPO_C");

                    b.Property<int?>("CpodEi")
                        .HasColumnType("int")
                        .HasColumnName("CPO_EI");

                    b.Property<int?>("CpodO")
                        .HasColumnType("int")
                        .HasColumnName("CPO_O");

                    b.Property<int?>("CpodP")
                        .HasColumnType("int")
                        .HasColumnName("CPO_P");

                    b.Property<int?>("CpodTotal")
                        .HasColumnType("int")
                        .HasColumnName("TotalCpo");

                    b.Property<int>("IdOdontograma")
                        .HasColumnType("int");

                    b.Property<int?>("TotalPiezasDentarias")
                        .HasColumnType("int")
                        .HasColumnName("TotalPiezasDentarias");

                    b.Property<int?>("TotalPiezasSanas")
                        .HasColumnType("int")
                        .HasColumnName("TotalPiezasSanas");

                    b.HasKey("IdEstadoPeriodontal")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdOdontograma" }, "fk_estadoperiodontal_odontograma1_idx");

                    b.ToTable("estadoperiodontal", (string)null);
                });

            modelBuilder.Entity("clinicadental.Models.Examenextraoral", b =>
                {
                    b.Property<int>("IdExamenExtraOral")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdExamenExtraOral"));

                    b.Property<string>("Atm")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("GanglioLinfatico")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<int>("IdRespiracion")
                        .HasColumnType("int");

                    b.Property<string>("Otro")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.HasKey("IdExamenExtraOral")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdRespiracion" }, "fk_examenextraoral_respiracion1_idx");

                    b.ToTable("examenextraoral", (string)null);
                });

            modelBuilder.Entity("clinicadental.Models.Examenintraoral", b =>
                {
                    b.Property<int>("IdExamenIntraoral")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdExamenIntraoral"));

                    b.Property<string>("Encia")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("Labio")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("Lengua")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("MucosaYugal")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("Paladar")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("PisoDeBoca")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("ProtesisDental")
                        .IsRequired()
                        .HasColumnType("enum('Si','No')");

                    b.HasKey("IdExamenIntraoral")
                        .HasName("PRIMARY");

                    b.ToTable("examenintraoral", (string)null);
                });

            modelBuilder.Entity("clinicadental.Models.Gradoinstruccion", b =>
                {
                    b.Property<int>("IdGradoInstruccion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdGradoInstruccion"));

                    b.Property<string>("GradoInstruccion1")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("GradoInstruccion");

                    b.HasKey("IdGradoInstruccion")
                        .HasName("PRIMARY");

                    b.ToTable("gradoinstruccion", (string)null);
                });

            modelBuilder.Entity("clinicadental.Models.Historialclinico", b =>
                {
                    b.Property<int>("IdHistorialClinico")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdHistorialClinico"));

                    b.Property<string>("Ci")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("CodigoHistorial")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<DateOnly?>("FechaHistorial")
                        .HasColumnType("date");

                    b.Property<int>("IdAntecedenteBucoDental")
                        .HasColumnType("int");

                    b.Property<int>("IdAntecedenteGeneral")
                        .HasColumnType("int");

                    b.Property<int>("IdAntecedenteHigieneOral")
                        .HasColumnType("int");

                    b.Property<int>("IdAntecedentePatologico")
                        .HasColumnType("int");

                    b.Property<int>("IdExamenExtraOral")
                        .HasColumnType("int");

                    b.Property<int>("IdExamenIntraoral")
                        .HasColumnType("int");

                    b.Property<int>("IdPaciente")
                        .HasColumnType("int");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int");

                    b.Property<string>("MotivoCita")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Observacion")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("IdHistorialClinico")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdAntecedenteBucoDental" }, "fk_HistorialClinico_antecedentebucodental1_idx");

                    b.HasIndex(new[] { "IdAntecedenteHigieneOral" }, "fk_HistorialClinico_antecedentehigieneoral1_idx");

                    b.HasIndex(new[] { "IdAntecedentePatologico" }, "fk_HistorialClinico_antecedentepatologico1_idx");

                    b.HasIndex(new[] { "IdExamenExtraOral" }, "fk_HistorialClinico_examenextraoral1_idx");

                    b.HasIndex(new[] { "IdExamenIntraoral" }, "fk_HistorialClinico_examenintraoral1_idx");

                    b.HasIndex(new[] { "IdPaciente" }, "fk_HistorialClinico_paciente1_idx");

                    b.HasIndex(new[] { "IdUsuario" }, "fk_HistorialClinico_usuario1_idx");

                    b.HasIndex(new[] { "IdAntecedenteGeneral" }, "fk_historialclinico_antecedentegeneral1_idx");

                    b.ToTable("historialclinico", (string)null);
                });

            modelBuilder.Entity("clinicadental.Models.Lugarnacimiento", b =>
                {
                    b.Property<int>("IdLugarNacimiento")
                        .HasColumnType("int");

                    b.Property<string>("LugarNacimiento1")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("LugarNacimiento");

                    b.HasKey("IdLugarNacimiento")
                        .HasName("PRIMARY");

                    b.ToTable("lugarnacimiento", (string)null);
                });

            modelBuilder.Entity("clinicadental.Models.Odontograma", b =>
                {
                    b.Property<int>("IdOdontograma")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdOdontograma"));

                    b.Property<string>("CaraPiezaDental")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<int>("IdAfeccion")
                        .HasColumnType("int");

                    b.Property<int>("IdHistorialClinico")
                        .HasColumnType("int");

                    b.Property<int?>("NroPiezaDental")
                        .HasColumnType("int");

                    b.HasKey("IdOdontograma")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdAfeccion" }, "fk_odontograma_afeccion1_idx");

                    b.HasIndex(new[] { "IdHistorialClinico" }, "fk_odontograma_historialclinico1_idx");

                    b.ToTable("odontograma", (string)null);
                });

            modelBuilder.Entity("clinicadental.Models.Paciente", b =>
                {
                    b.Property<int>("IdPaciente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdPaciente"));

                    b.Property<string>("ApellidoMaterno")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("ApellidoPaterno")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("Celular")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("CodigoPaciente")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("Direccion")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateOnly?>("FechaNacimiento")
                        .HasColumnType("date");

                    b.Property<int>("IdEstadoCivil")
                        .HasColumnType("int");

                    b.Property<int>("IdGradoInstruccion")
                        .HasColumnType("int");

                    b.Property<int>("IdLugarNacimiento")
                        .HasColumnType("int");

                    b.Property<string>("Nombres")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("Ocupacion")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("Sexo")
                        .IsRequired()
                        .HasColumnType("enum('Hombre','Mujer')");

                    b.HasKey("IdPaciente")
                        .HasName("PRIMARY");


                    b.ToTable("paciente", (string)null);
                });

            modelBuilder.Entity("clinicadental.Models.PagosTratamiento", b =>
                {
                    b.Property<int>("IdPagoTratamiento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdPagoTratamiento"));

                    b.Property<DateOnly>("FechaPago")
                        .HasColumnType("date");

                    b.Property<int>("IdpresupuestoTratamiento")
                        .HasColumnType("int");

                    b.Property<decimal>("Monto")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)");

                    b.HasKey("IdPagoTratamiento")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdpresupuestoTratamiento" }, "fk_pagostratamiento_presupuestotratamiento1_idx");

                    b.ToTable("pagostratamiento", (string)null);
                });

            modelBuilder.Entity("clinicadental.Models.PresupuestoTratamiento", b =>
                {
                    b.Property<int>("IdPresupuestoTratamiento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdPresupuestoTratamiento"));

                    b.Property<decimal>("ACuenta")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)");

                    b.Property<int>("IdTratamiento")
                        .HasColumnType("int");

                    b.Property<decimal>("PresupuestoTotal")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)");

                    b.Property<decimal>("Saldo")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)");

                    b.HasKey("IdPresupuestoTratamiento")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdTratamiento" }, "fk_presupuestotratamiento_tratamiento1_idx");

                    b.ToTable("presupuestotratamiento", (string)null);
                });

            modelBuilder.Entity("clinicadental.Models.Respiracion", b =>
                {
                    b.Property<int>("IdRespiracion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdRespiracion"));

                    b.Property<string>("TipoRespiracion")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.HasKey("IdRespiracion")
                        .HasName("PRIMARY");

                    b.ToTable("respiracion", (string)null);
                });

            modelBuilder.Entity("clinicadental.Models.Rol", b =>
                {
                    b.Property<int>("IdRol")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdRol"));

                    b.Property<string>("TipoRol")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.HasKey("IdRol")
                        .HasName("PRIMARY");

                    b.ToTable("rol", (string)null);
                });

            modelBuilder.Entity("clinicadental.Models.Tratamiento", b =>
                {
                    b.Property<int>("IdTratamiento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdTratamiento"));

                    b.Property<string>("Analisis")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<DateOnly?>("FechaTratamiento")
                        .HasColumnType("date");

                    b.Property<int>("IdHistorialClinico")
                        .HasColumnType("int");

                    b.Property<string>("Objetivo")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("PlanAccion")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("Subjetivo")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<sbyte?>("TratamientoConcluido")
                        .HasColumnType("tinyint");

                    b.HasKey("IdTratamiento")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdHistorialClinico" }, "fk_tratamiento_historialclinico1_idx");

                    b.ToTable("tratamiento", (string)null);
                });

            modelBuilder.Entity("clinicadental.Models.Usuario", b =>
                {
                    b.Property<int>("IdUsuario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdUsuario"));

                    b.Property<string>("ApellidoMaterno")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("ApellidoPaterno")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("Celular")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("CodigoUsuario")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<string>("Especialidad")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("FechaNacimiento")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("FotoUsuario")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<int>("IdRol")
                        .HasColumnType("int");

                    b.Property<string>("PrimerNombre")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("SegundoNombre")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("Sexo")
                        .IsRequired()
                        .HasColumnType("enum('Hombre','Mujer')");

                    b.HasKey("IdUsuario")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdRol" }, "fk_usuario_rol1_idx");

                    b.ToTable("usuario", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("clinicadental.Models.Antecedenteenfermedad", b =>
                {
                    b.HasOne("clinicadental.Models.Antecedentepatologico", "IdAntecedentePatologicoNavigation")
                        .WithMany("Antecedenteenfermedads")
                        .HasForeignKey("IdAntecedentePatologico")
                        .IsRequired()
                        .HasConstraintName("fk_antecedenteenfermedad_antecedentepatologico1");

                    b.HasOne("clinicadental.Models.Enfermerdad", "IdEnfermerdadNavigation")
                        .WithMany("Antecedenteenfermedads")
                        .HasForeignKey("IdEnfermerdad")
                        .IsRequired()
                        .HasConstraintName("fk_antecedenteenfermedad_enfermerdad1");

                    b.Navigation("IdAntecedentePatologicoNavigation");

                    b.Navigation("IdEnfermerdadNavigation");
                });

            modelBuilder.Entity("clinicadental.Models.Avancetratamiento", b =>
                {
                    b.HasOne("clinicadental.Models.Tratamiento", "IdTratamientoNavigation")
                        .WithMany("Avancetratamientos")
                        .HasForeignKey("IdTratamiento")
                        .IsRequired()
                        .HasConstraintName("fk_avancetratamiento_tratamiento1");

                    b.Navigation("IdTratamientoNavigation");
                });

            modelBuilder.Entity("clinicadental.Models.Cita", b =>
                {
                    b.HasOne("clinicadental.Models.Usuario", "UsuarioNavigation")
                        .WithMany("Citas")
                        .HasForeignKey("IdUsuario")
                        .IsRequired()
                        .HasConstraintName("fk_cita_usuario1");

                    b.Navigation("UsuarioNavigation");
                });

            modelBuilder.Entity("clinicadental.Models.Clinica", b =>
                {
                    b.HasOne("clinicadental.Models.Usuario", "UsuariosNavigation")
                        .WithMany("Clinicas")
                        .HasForeignKey("IdUsuario")
                        .HasConstraintName("fk_clinica_usuario1");

                    b.Navigation("UsuariosNavigation");
                });

            modelBuilder.Entity("clinicadental.Models.Cuentum", b =>
                {
                    b.HasOne("clinicadental.Models.Usuario", "UsuarioNavigation")
                        .WithMany("Cuentas")
                        .HasForeignKey("IdCuenta")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cuenta_usuario1");

                    b.Navigation("UsuarioNavigation");
                });

            modelBuilder.Entity("clinicadental.Models.Estadoperiodontale", b =>
                {
                    b.HasOne("clinicadental.Models.Odontograma", "IdOdontogramaNavigation")
                        .WithMany("Estadoperiodontales")
                        .HasForeignKey("IdOdontograma")
                        .IsRequired()
                        .HasConstraintName("fk_estadoperiodontal_odontograma1");

                    b.Navigation("IdOdontogramaNavigation");
                });

            modelBuilder.Entity("clinicadental.Models.Examenextraoral", b =>
                {
                    b.HasOne("clinicadental.Models.Respiracion", "IdRespiracionNavigation")
                        .WithMany("Examenextraorals")
                        .HasForeignKey("IdRespiracion")
                        .IsRequired()
                        .HasConstraintName("fk_examenextraoral_respiracion1");

                    b.Navigation("IdRespiracionNavigation");
                });

            modelBuilder.Entity("clinicadental.Models.Historialclinico", b =>
                {
                    b.HasOne("clinicadental.Models.Antecedentebucodental", "IdAntecedenteBucoDentalNavigation")
                        .WithMany("Historialclinicos")
                        .HasForeignKey("IdAntecedenteBucoDental")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_HistorialClinico_antecedentebucodental1");

                    b.HasOne("clinicadental.Models.Antecedentegeneral", "IdAntecedenteGeneralNavigation")
                        .WithMany("Historialclinicos")
                        .HasForeignKey("IdAntecedenteGeneral")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_historialclinico_antecedentegeneral1");

                    b.HasOne("clinicadental.Models.Antecedentehigieneoral", "IdAntecedenteHigieneOralNavigation")
                        .WithMany("Historialclinicos")
                        .HasForeignKey("IdAntecedenteHigieneOral")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_HistorialClinico_antecedentehigieneoral1");

                    b.HasOne("clinicadental.Models.Antecedentepatologico", "IdAntecedentePatologicoNavigation")
                        .WithMany("Historialclinicos")
                        .HasForeignKey("IdAntecedentePatologico")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_HistorialClinico_antecedentepatologico1");

                    b.HasOne("clinicadental.Models.Examenextraoral", "IdExamenExtraOralNavigation")
                        .WithMany("Historialclinicos")
                        .HasForeignKey("IdExamenExtraOral")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_HistorialClinico_examenextraoral1");

                    b.HasOne("clinicadental.Models.Examenintraoral", "IdExamenIntraoralNavigation")
                        .WithMany("Historialclinicos")
                        .HasForeignKey("IdExamenIntraoral")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_HistorialClinico_examenintraoral1");

                    b.HasOne("clinicadental.Models.Paciente", "IdPacienteNavigation")
                        .WithMany("Historialclinicos")
                        .HasForeignKey("IdPaciente")
                        .IsRequired()
                        .HasConstraintName("fk_HistorialClinico_paciente1");

                    b.HasOne("clinicadental.Models.Usuario", "IdUsuarioNavigation")
                        .WithMany("Historialclinicos")
                        .HasForeignKey("IdUsuario")
                        .IsRequired()
                        .HasConstraintName("fk_HistorialClinico_usuario1");

                    b.Navigation("IdAntecedenteBucoDentalNavigation");

                    b.Navigation("IdAntecedenteGeneralNavigation");

                    b.Navigation("IdAntecedenteHigieneOralNavigation");

                    b.Navigation("IdAntecedentePatologicoNavigation");

                    b.Navigation("IdExamenExtraOralNavigation");

                    b.Navigation("IdExamenIntraoralNavigation");

                    b.Navigation("IdPacienteNavigation");

                    b.Navigation("IdUsuarioNavigation");
                });

            modelBuilder.Entity("clinicadental.Models.Odontograma", b =>
                {
                    b.HasOne("clinicadental.Models.Afeccion", "IdAfeccionNavigation")
                        .WithMany("Odontogramas")
                        .HasForeignKey("IdAfeccion")
                        .IsRequired()
                        .HasConstraintName("fk_odontograma_afeccion1");

                    b.HasOne("clinicadental.Models.Historialclinico", "IdHistorialClinicoNavigation")
                        .WithMany("Odontogramas")
                        .HasForeignKey("IdHistorialClinico")
                        .IsRequired()
                        .HasConstraintName("fk_odontograma_historialclinico1");

                    b.Navigation("IdAfeccionNavigation");

                    b.Navigation("IdHistorialClinicoNavigation");
                });

            modelBuilder.Entity("clinicadental.Models.Paciente", b =>
                {

                    b.Navigation("IdEstadoCivilNavigation");

                    b.Navigation("IdGradoInstruccionNavigation");

                    b.Navigation("IdLugarNacimientoNavigation");
                });

            modelBuilder.Entity("clinicadental.Models.PagosTratamiento", b =>
                {
                    b.HasOne("clinicadental.Models.PresupuestoTratamiento", "IdPresupuestoTratamientoNavigation")
                        .WithMany("PagoTratamiento")
                        .HasForeignKey("IdpresupuestoTratamiento")
                        .IsRequired()
                        .HasConstraintName("fk_pagostratamiento_presupuestotratamiento1");

                    b.Navigation("IdPresupuestoTratamientoNavigation");
                });

            modelBuilder.Entity("clinicadental.Models.PresupuestoTratamiento", b =>
                {
                    b.HasOne("clinicadental.Models.Tratamiento", "IdTratamientoNavigation")
                        .WithMany("PresupuestoTratamientos")
                        .HasForeignKey("IdTratamiento")
                        .IsRequired()
                        .HasConstraintName("fk_presupuestotratamiento_tratamiento1");

                    b.Navigation("IdTratamientoNavigation");
                });

            modelBuilder.Entity("clinicadental.Models.Tratamiento", b =>
                {
                    b.HasOne("clinicadental.Models.Historialclinico", "IdHistorialClinicoNavigation")
                        .WithMany("Tratamientos")
                        .HasForeignKey("IdHistorialClinico")
                        .IsRequired()
                        .HasConstraintName("fk_tratamiento_historialclinico1");

                    b.Navigation("IdHistorialClinicoNavigation");
                });

            modelBuilder.Entity("clinicadental.Models.Usuario", b =>
                {
                    b.HasOne("clinicadental.Models.Rol", "IdRolNavigation")
                        .WithMany("Usuarios")
                        .HasForeignKey("IdRol")
                        .IsRequired()
                        .HasConstraintName("fk_usuario_rol1");

                    b.Navigation("IdRolNavigation");
                });

            modelBuilder.Entity("clinicadental.Models.Afeccion", b =>
                {
                    b.Navigation("Odontogramas");
                });

            modelBuilder.Entity("clinicadental.Models.Antecedentebucodental", b =>
                {
                    b.Navigation("Historialclinicos");
                });

            modelBuilder.Entity("clinicadental.Models.Antecedentegeneral", b =>
                {
                    b.Navigation("Historialclinicos");
                });

            modelBuilder.Entity("clinicadental.Models.Antecedentehigieneoral", b =>
                {
                    b.Navigation("Historialclinicos");
                });

            modelBuilder.Entity("clinicadental.Models.Antecedentepatologico", b =>
                {
                    b.Navigation("Antecedenteenfermedads");

                    b.Navigation("Historialclinicos");
                });

            modelBuilder.Entity("clinicadental.Models.Enfermerdad", b =>
                {
                    b.Navigation("Antecedenteenfermedads");
                });

            modelBuilder.Entity("clinicadental.Models.Estadocivil", b =>
                {
                    b.Navigation("Pacientes");
                });

            modelBuilder.Entity("clinicadental.Models.Examenextraoral", b =>
                {
                    b.Navigation("Historialclinicos");
                });

            modelBuilder.Entity("clinicadental.Models.Examenintraoral", b =>
                {
                    b.Navigation("Historialclinicos");
                });

            modelBuilder.Entity("clinicadental.Models.Gradoinstruccion", b =>
                {
                    b.Navigation("Pacientes");
                });

            modelBuilder.Entity("clinicadental.Models.Historialclinico", b =>
                {
                    b.Navigation("Odontogramas");

                    b.Navigation("Tratamientos");
                });

            modelBuilder.Entity("clinicadental.Models.Lugarnacimiento", b =>
                {
                    b.Navigation("Pacientes");
                });

            modelBuilder.Entity("clinicadental.Models.Odontograma", b =>
                {
                    b.Navigation("Estadoperiodontales");
                });

            modelBuilder.Entity("clinicadental.Models.Paciente", b =>
                {
                    b.Navigation("Historialclinicos");
                });

            modelBuilder.Entity("clinicadental.Models.PresupuestoTratamiento", b =>
                {
                    b.Navigation("PagoTratamiento");
                });

            modelBuilder.Entity("clinicadental.Models.Respiracion", b =>
                {
                    b.Navigation("Examenextraorals");
                });

            modelBuilder.Entity("clinicadental.Models.Rol", b =>
                {
                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("clinicadental.Models.Tratamiento", b =>
                {
                    b.Navigation("Avancetratamientos");

                    b.Navigation("PresupuestoTratamientos");
                });

            modelBuilder.Entity("clinicadental.Models.Usuario", b =>
                {
                    b.Navigation("Citas");

                    b.Navigation("Clinicas");

                    b.Navigation("Cuentas");

                    b.Navigation("Historialclinicos");
                });
#pragma warning restore 612, 618
        }
    }
}
